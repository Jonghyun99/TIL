## 변수(variable)

### 변수의 선언

PHP에서는 달러($) 기호를 사용하여 변수를 선언한다.

```php
문법
$변수이름 = 초기값;
```

별도 타입 선언은 없으며 자동으로 결정된다.

예제

```php
$var = 10;    // 정수값을 대입함
$var = 3.14;  // 실수값을 대입함
$var = "PHP"; // 문자열 대입
```

### 변수 이름의 생성 규칙

1. 변수 이름은 영문 대소문자,숫자,언더스코어로만 구성된다.
2. 변수의 이름은 숫자와 구분을 빠르게 하기 위해 숫자로는 시작할 숭 ㅓㅄ다.
3. 변수의 이름에는 공백이 포함될 수 없다.
4. 변수의 이름으로 $this (예약어)는 사용할 수 없다.
5. 변수는 대소문자를 구분한다.

변수를 사용할 때에는 중괄호로 감싸서 정확하게 명시해야한다.

```php
$var = 10;

① echo "$var";   // 10
② echo "{$var}"; // 10
③ echo "변수 \$var에 저장된 값은 $var입니다.";   // 변수 $var에 저장된 값은 .
④ echo "변수 \$var에 저장된 값은 {$var}입니다."; // 변수 $var에 저장된 값은 10입니다.
```

### 변수의 초기화

PHP는 변수의 선언과 동시에 초기화를 하지 않아도 된다.

사용되는 타입에 따라 자동 값으로 초기화된다.

1. 불리언 : false
2. 정수 : 0
3. 실수 : 0.0
4. 문자열 : 빈 문자열
5. 배열 : 빈 배열

## 변수의 종류

PHP에서 변수는 스크립트 내 어느 곳에서든 선언할 수 있다.

변수의 유효 범위에 따라 다음과 같이 구분한다.

1. 지역 변수 (local variable)
2. 전역 변수 (global variable)
3. 정적 변수 (static variable)

### 지역 변수(local variable)

함수 내부에서 선언된 변수는 오직 함수 내부에서만 접근할 수 있다.

예제

```php
function varFunc() {
    $var = 10; // 지역 변수로 선언함
    echo "함수 내부에서 호출한 지역 변수 var의 값은 {$var}입니다.<br>";
}
varFunc();
echo "함수 밖에서 호출한 지역 변수 var의 값은 {$var}입니다.";

//함수 내부에서 호출한 지역 변수 var의 값은 10입니다.
//함수 밖에서 호출한 지역 변수 var의 값은 입니다.
```

함수 밖에서 변수를 사용하면 아무 값도 얻을 수 없다. (이미 메모리에서 제거됨)

### 전역 변수(global variable)

```php
$var = 10;       // 전역 변수로 선언함
function varFunc() {
    echo "함수 내부에서 호출한 전역 변수 var의 값은 {$var}입니다.<br>";
    global $var; // 함수 내에서 사용할 전역 변수를 명시함
    echo "함수 내부에서 호출한 전역 변수 var의 값은 {$var}입니다.<br>";
}
varFunc();
echo "함수 밖에서 호출한 전역 변수 var의 값은 {$var}입니다.";

//함수 내부에서 호출한 지역 변수 var의 값은 입니다.
//함수 내부에서 호출한 지역 변수 var의 값은 10입니다.
//함수 내부에서 호출한 지역 변수 var의 값은 10입니다.
```

처음 호출한 echo는 아무런 변수를 할당받지 못한다.

변수를 global 키워드로 명시한 뒤에 echo 함수는 정확한 전역 변수의 값을 출력한다.

PHP는 모든 전역 변수를 $GLOBALS 배열에 저장한다.

이 배열에 인덱스 변수의 이름을 사용하면, 해당 전역변수 값에 접근할 수 있다.

이 배열을 통해 바로 전역 변수의 값을 변경할 수 있다.

```php
$var = 10; // 전역 변수로 선언함
function varFunc() {
    echo "함수 내부에서 호출한 전역 변수 var의 값은 {$var}입니다.<br>";
    echo "함수 내부에서 호출한 전역 변수 var의 값은 {$GLOBALS['var']}입니다.<br>";
}
varFunc();
echo "함수 밖에서 호출한 전역 변수 var의 값은 {$var}입니다.";

//함수 내부에서 호출한 전역 변수 var의 값은 입니다.
//함수 내부에서 호출한 전역 변수 var의 값은 10입니다.
//함수 밖에서 호출한 전역 변수 var의 값은 10입니다.
```

### 슈퍼 글로벌(superglobal)

PHP는 미리 정의된 전역 변수인 슈퍼 글로벌을 제공한다.

이러한 슈퍼 글로벌은 특별한 선언 없이 스크립트 내에서 바로 사용할 수 있다.

PHP가 제공하는 슈퍼글로벌은 다음과 같다.

1. $GLOBALS

2. $_SERVER

3. $_GET

4. $_POST

5. $_FILES

6. $_COOKIE

7. $_SESSION

8. $_REQUEST

9. $_ENV

### 정적 변수(static variable)

정적 변수는 함수 내부에서 static 키워드로 선언한 변수이다.

함수 내부에서 선언한 정적 변수는 함수 호출이 종료되더라도 메모리 상에서 사라지지 않는다.

하지만 지역 변수처럼 해당 함수에서만 접근할 수 있습니다.

```php
function counter() {
    static $count = 0;
    echo "함수 내부에서 호출한 static 변수 count의 값은 {$count}입니다.<br>";
    $count++;
}
counter();
counter();
counter();
```

$count 정적 변수는 함수 종료 이후에도 값을 유지한다.

## 상수(constant)

상수란 변수와 같으나 차이점으로 한 번 선언되면, 그 데이터를 변경, 해제할 수 없다.

### define() 함수

PHP에서는 define() 함수를 사용해 상수를 선언할 수 있다.

원형

```php
define(상수이름, 상숫값, 대소문자구분여부)
```

첫 번째 인수로 상수 이름을 전달받고, 두 번째 인수로 값, 세 번째 인수로 대소문잘을 구분하는가를 설정하며 기본값은 false로 대소문자를 구분한다.

```php
define("PHP", "PHP 수업에 잘 오셨습니다!<br>"); // 대소문자를 구분함.(기본 설정)
echo PHP; // PHP 수업에 잘 오셨습니다!
echo php; // php

define("PHP", "<br>PHP 수업에 잘 오셨습니다!", true); // 대소문자를 구분하지 않음.
echo php; // PHP 수업에 잘 오셨습니다!
echo Php; // PHP 수업에 잘 오셨습니다!
```

이렇게 선언된 상수는 스크립트 어디에서도 참조할 수 있다.

단, 선언되기 이전에는 사용할 수 없다.

```php
function defFunc()
{
    echo PHP; // PHP
    define("PHP", "PHP 수업에 잘 오셨습니다!");
    echo PHP; // PHP 수업에 잘 오셨습니다!
}
defFunc();
echo PHP;     // PHP 수업에 잘 오셨습니다!
```

### 마법 상수(magic constants)

PHP는 어떤 스크립트에서도 사용할 수 있는 미리 정의된 다양한 상수를 제공한다.

다음 예제는 PHP에서 미리 정의된 모든 상수를 출력한다.

```php
echo "<pre>";
print_r(get_defined_constants(true));
echo "</pre>";
```

이 외 어디에 사용하느냐에 따라 용도가 변경되는 마법 상수를 제공한다.

마법 상수는 대소문자를 구분하지 않는다.

1. __LINE__ : 파일의현재 줄 번호 반환
2. __FILE__ : 파일 전체 경로와 이름 반환, include 내부에서 사용할 경우 include된 파일명 반환
3. __DIR__ : 파일 디렉터리 반환, 포함한 파일 안에서 사용할 경우 포함된 파일의 디렉터리를 반환, dirname(__FILE__)와 같은 결과 반환한다.
4. __FUNCTION__ : 함수 이름 반환
5. __CLASS__ : 클래스 이름을 반환, 클래스 이름은 대소문자를 구분함
6. __TRANT__ : 트레이트 이름을 반환, 트레이트 이름은 트레이트를 선언한 네임스페이스를 포함한다.
7. __METHOD__ : 클래스의 메소드 이름을 반환함.
8. __NAMESPACE__ : 현재 네임스페이스의 이름을 반환함.

```php
function magicCons() {
    echo __LINE__;     // 파일의 현재 줄 번호를 반환함.
    echo __FUNCTION__; // 함수의 이름을 반환함.
    echo __METHOD__;   // 클래스의 메소드 이름을 반환함.
}
magicCons();
```

## 기본타입

### 기본타입

PHP가 제공하는 기본타입

1. 불리언(boolean)

2. 정수(integer)

3. 실수(float)

4. 문자열(string)

5. 배열(array)

6. 객체(object)

7. 리소스(resource)

8. NULL

불리언은 참과 거짓을 표현하며 true, false로 구분, 대소문자는 구분하지 않는다.

아래 값들은 모두 false로 인식된다.

- 불리언 : false
- 정수 : 0
- 실수 : 0.0
- 빈 문자열과 문자열 "0"
- 빈 배열
- NULL

아래 값 이외 모든 값은 true로 인식된다.

```php
var_dump((bool) false);   // false
var_dump((bool) "false"); // true
var_dump((bool) 0);       // false
var_dump((bool) -100);    // true
var_dump((bool) 0.0);     // false
var_dump((bool) "");      // false
var_dump((bool) "0");     // false
var_dump((bool) array()); // false
var_dump((bool) null);    // false
```

### 정수(integer)

PHP에서 정수의 표현 범위는 운영체제에 따라 달라지며, 64비트 운영체제 기준으로 2^63~(2^63-1) 사이의 값을 가진다.

PHP에서는 부호가 없는 정수는 지원하지 않는다.

8, 10, 16진수 등으로 표현할 수 있음.

```php
echo "integer 타입의 크기는 ".PHP_INT_SIZE."바이트 입니다.<br>";
echo "integer 타입이 표현할 수 있는 가장 큰 수는 ".PHP_INT_MAX." 입니다.<br>";
$int_01 = 100;
$int_02 = 2147483647; // integer가 표현할 수 있는 범위를 넘지 않는 값을 대입함.
$int_03 = 2147483648; // integer가 표현할 수 있는 범위를 넘는 값을 대입함.
```

PHP에서는 변수 값이 정수의 최대범위를 넘으면 자동으로 실수형으로 인식한다.

### 실수(float)

실수는 소수부나 지수부를 가지며 정수보다 더 넓은 표현 범위를 가진다.

PHP에서 실수의 표현 범위는 운영체제에 따라 달라지지만 대략 ~1.8e307까지 표현할 수 있다.

하지만 컴퓨터에서 실수를 표현하는 방식은 반드시 오차가 존재하는 한계를 지니므로, 실수형끼리 직접 값을 비교하는 것은 피하는 것이 좋다.

```php
$float_01 = 3.14;
$float_02 = 1.23e-4;
$float_03 = 1.8E307; // float이 표현할 수 있는 범위를 넘지 않는 값을 대입함.
$float_04 = 1.8E308; // float이 표현할 수 있는 범위를 넘는 값을 대입함.
```

실수 최대범위가 넘으면 그 변수는 미리 정의된 상수인 INF로 인식된다.

### 문자열(string)

문자열은 문자의 집합이다.

PHP에서 문자열은 큰따옴표 혹은 작은 따옴표로 표현한다.

ASCII 인코딩 환경에서는 영어는 한 글자당 1바이트, 한글은 한 글자당 2바이트로 표현된다.

UTF에서는 영문은 한 글자당 1바이트, 한글은 3바이트로 표현된다.

```php
$str_01 = "PHP";
$str_02 = "자바스크립트";

echo strlen($str_01); // 3
echo strlen($str_02); // 18
```

### 배열(array)

PHP에서는 한 쌍의 키(key)와 값(value)로 이루어진 맵(map)으로 구성되는 집합을 의미한다.

키값으로는 정수와 문자열만 가능하며, 하나의 배열에 두 가지 키값을 같이 사용할 수 있다.

만약 정수와 문자열 이외 다른 값을 키값으로 사용하면, 다음과 같이 타입 변환이 이루어진다.

- 불리언은 true는 1로, false는 0으로
- 유효한 숫자로만 이루어진 문자열은 정수나 실수로
- 실수는 소수 부분이 제거되고 정수로 변환
- NULL은 빈 문자열("")로 변환
- 배열과 객체는 키 값으로 사용할 수 없음

```php
$arr = array(
    1 => "첫 번째 값",   // PHP의 배열에서 키값의 1과 "1"은 같은 값을 나타냄.
    "1" => "두 번째 값", // 같은 키값을 사용하여 두 번 선언했기 때문에 나중에 선언된 "두 번째 값"만 남게됨.
    10 => "세 번째 값",
    -10 => "네 번째 값"
);
var_dump($arr);
echo $arr[1];
echo $arr["1"];
echo $arr[10];
echo $arr[-10];
```

위 예쩨에서 1과 "1"은 같은 값으로 저장되어 마지막 선언된 "두 번째 값"으로 저장된다.

### 객체(object)

객체는 클래스의 인스턴스(instance)를 저장하기 위한 타입이다.

프로퍼티와 메소드를 포함할 수 있다.

```php
class Lecture {
    function Lecture() {
        $this->lec_01 = "PHP";
        $this->lec_02 = "MySQL";
    }
}
$var = new Lecture; // 객체 생성
echo $var->lec_01;  // 객체의 속성 접근
echo "<br>";
echo $var->lec_02;
```

### 리소스(resource)

PHP 외부의 자원을 의미한다.

데이터베이스 함수 등에서 데이터베이스 연결 등을 반환할 때 사용한다.

### NULL

NULL은 오직 한 가지 값(NULL 상수)를 가질 수 있는 특별한 타입이다.(빈값)

## 타입 변환(type juggling)

### 자동 타입 변환(type juggling)

PHP에서는 변수를 선언할 때 타입을 명시할 필요가 없다.

상황에 따라 자동으로 타입이 변환되기 때문이다.

따라서 PHP는 타입 강도가 매우 약하며 동적으로 결정된다.

### 강제 타입 변환(type casting)

PHP에서는 강제 타입 변환을 캐스트 연산자인 괄호 ( ) 를 사용하여 수행한다.

```php
$var_01 = 10;
var_dump($var_01);           // int(10)  

$var_02 = (boolean) $var_01;
var_dump($var_02);           // bool(true)
 
$var_03 = 0;
var_dump($var_03);           // int(0)  

$var_04 = (boolean) $var_03;
var_dump($var_04);           // bool(false)
```

### 가변 변수(variable variables)

PHP에서는 변수 타입이 아니라 이름도 동적으로 바꿀 수 있다.

이런 변수를 가변변수라고 하며 , 해당 변수의 값을 또 다른 변수의 이름으로 취급한다.

```php
$PHP = "HTML";
$HTML = "CSS";
$CSS = "JavaScript";
$JavaScript = "Ajax";
$Ajax = "PHP";  
 

echo $PHP;       // HTML
echo $$PHP;      // $HTML -> CSS
echo $$$PHP;     // $$HTML -> $CSS -> JavaScript
echo $$$$PHP;    // $$$HTML -> $$CSS -> $JavaScript -> Ajax
echo $$$$$PHP;   // $$$$HTML -> $$$CSS -> $$JavaScript -> $Ajax -> PHP
echo $$$$$$PHP;  // $$$$$HTML -> $$$$CSS -> $$$JavaScript -> $$Ajax -> $PHP -> HTML
echo $$$$$$$PHP; // $$$$$$HTML -> $$$$$CSS -> $$$$JavaScript -> $$$Ajax -> $$PHP -> $HTML -> CSS ...
```

위의 예제에서 알 수 있듯이 PHP에서는 달러($) 기호를 사용하여 변수의 이름을 유동적으로 설정하거나 사용할 수 있다.