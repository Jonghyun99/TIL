## 산술 연산자(arithmetic operator)

사칙 연산을  다루는 가장 기본적이고 많이 사용하는 연산자이다.

모두 두개의 피연산자를 가지는 이항 연산자이며, 결합 방향은 왼쪽에서 오른쪽이다.

+ : 왼쪽의 피연산자에 오른쪽의 피연산자를 더함

- : 왼쪽의 피연산자에서 오른쪽의 피연산자를 뺌

* : 왼쪽의 피연산자에서 오른쪽 피연산자 곱함

/ : 왼쪽의 피연산자에서 오른쪽 피연산자 나눔

% : 왼쪽의 피연산자에서 오른쪽 피연산자 나누어 나머지 반환함

** : 왼쪽의 피연산자에서 오른쪽 피연산자 제곱함

```php
$num_01 = 10;
$num_02 = 4;

echo "+ 연산자에 의한 결괏값은 ".($num_01 + $num_02)."입니다.<br>"; // 14
echo "- 연산자에 의한 결괏값은 ".($num_01 - $num_02)."입니다.<br>"; // 6
echo "* 연산자에 의한 결괏값은 ".($num_01 * $num_02)."입니다.<br>"; // 40
echo "/ 연산자에 의한 결괏값은 ".($num_01 / $num_02)."입니다.<br>"; // 2.5
echo "% 연산자에 의한 결괏값은 ".($num_01 % $num_02)."입니다.";     // 2
```

연산자 우선순위에 대해 자세한 내용은 검색하여 자료를 참고하자.

## 대입 연산자(assignment operator)

### 대입 연산자

= : 왼쪽의 피연산자에 오른쪽 피연산자를 대입함

### 복합 대입 연산자

+= : 왼쪽의 피연산자에 오른쪽 피연산자를 더한 후 왼쪽 피연산자에 대입함.

-= : 왼쪽의 피연산자에 오른쪽 피연산자를 뺀 후 왼쪽 피연산자에 대입함.

생략

.= : += : 왼쪽의 피연산자 문자열에 피연산자를 추가한 후 왼쪽 피연산자에 대입함.

<<= : 왼쪽 피연산자의 비트를 오른쪽 피연산자만큼 전부 왼쪽 이동 후, 결과를 왼쪽에 대입함

>>= : 왼쪽 피연산자 비트를 부호를 유지하며 오른쪽 피연산자만큼 오른쪽으로 이동하여 결과를 왼쪽에 대입함

&= : AND대입 연산자

|= : or대입

^= : 왼쪽 피연산자 논리식과 오른쪽 피연산자 논리식이 다르면 왼쪽에 true 대입 후 그 외 false 대입

## 비교 연산자

### 비교 연산자(comparsion operator)

피연산자 사이에 크기를 판단하여 true와 false를 반환한다.

결합 방향은 모두 왼쪽에서 오른쪽

== : 같은 값이면 참 반환

=== : 같은 값 + 같은 타입일 시 참 반환

≠ : 같은 값이 아니면 참 반환

<> : ≠와 동일

≠= : 같은 값 + 같은 타입이 아니여야 참 반환

생략

```php
$num_01 = 3;
$num_02 = 3.0;
$num_03 = 3;

var_dump($num_01 == $num_02);  // true
var_dump($num_01 === $num_02); // false
var_dump($num_01 != $num_03);  // false
```

### 타입 간 비교

```php
① var_dump(0 < true);           // true
② var_dump("123abc" == 123);    // true
③ var_dump("123abc" === 123);   // false

$arr_01 = array("a" => 10);
$arr_02 = array("a" => 5);
$arr_03 = array("a" => 5, "c" => 7);

④ var_dump($arr_01 >= $arr_02); // true
⑤ var_dump($arr_01 >= $arr_03); // false
⑥ var_dump("문자열" < $arr_01); // true
```

1. 불리언과 0을 비교하므로, 숫자 0은 false로 변환되어 비교된다.
2. 문자열과 숫자를 비교하므로, 문자열 "123abc"는 숫자 123으로 변환되어 비교된다.
3. 타입까지 변하지는 않는다
4. 배열간 비교하므로 길이가 같은 경우 값으로 비교한다.
5. 길이가 다르면 요소가 적은쪽이 작다고 판단된다.
6. 배열과 다른 타입 비교시 언제나 배열이 크다.

## 기타 연산자

### 삼항 연산자(ternary operator)

유일하게 피 연산자를 3개를 지닌다.

문법

```php
조건식 ? 반환값1 : 반환값2
```

조건식이 참일 시 반환값1, 거짓일 시 반환값2 반환

```php
$num_01 = 15;
$num_02 = 8;
$result = ($num_01 > $num_02) ? $num_01 : $num_02;

echo "둘 중에 더 큰수는 {$result}입니다.";
```

### 문자열 연산자(string operator)

PHP에서는 .을 이용하여 문자열을 연결한다.

```php
$str_01 = "PHP 수업";
$str_02 = "에 오신것을 환영합니다!";

echo "두 문자열을 합친 문자열은 '".($str_01.$str_02)."'입니다.<br>";

echo $str_01, $str_02;
```

echo()함수에서는 쉼표를 이용하여 연결할 수 있다.

### 배열 합집합 연산자(array union operator)

+를 사용하여 두 배열의 합집합을 반환한다.

```php
$arr_01 = array("1st" => "PHP", "2nd" => "MySQL");
$arr_02 = array("1st" => "HTML", "2nd" => "CSS", "3rd" => "JavaScript");

$result_01 = $arr_01 + $arr_02; // [PHP, MySQL, JavaScript]
var_dump($result_01);
$result_02 = $arr_02 + $arr_01; // [HTML, CSS, JavaScript]
var_dump($result_02);
```

왼쪽 배열을 기준으로 반환한다.

```php
$arr_01 = array("PHP", "MySQL");
$arr_02 = array("HTML", "CSS", "JavaScript");

$result_01 = $arr_01 + $arr_02; // [PHP, MySQL, JavaScript]
var_dump($result_01);
$result_02 = $arr_02 + $arr_01; // [HTML, CSS, JavaScript]
var_dump($result_02);
```

key, value 형식이 아니여도 같다.

### instance of 연산자

1. 해당 변수가 어떤 클래스(class)에서 생성된 객체(object)인지를 확인할 때

2. 해당 변수가 부모 클래스(parent class)에서 상속받은 클래스인지를 확인할 때

3. 해당 변수가 클래스의 인스턴스(instance)인지 아닌지를 확인할 때

4. 해당 변수가 인터페이스(interface)로 구현한 클래스의 객체 인스턴스(object instance)인지 아닌지를 확인할 때

```php
interface Interface01

{
}
class Class01

{
}
class Class02 extends Class01 implements Interface01

{
}

/* 어떤 클래스(class)에서 생성된 객체(object)인지를 확인할 때 */
$var_01 = new Class01; // Class01 클래스 객체를 생성함.
var_dump($var_01 instanceof Class01);     // true
var_dump($var_01 instanceof Class02);     // false

 

/* 부모 클래스(parent class)에서 상속받은 클래스인지를 확인할 때 */
$var_02 = new Class02; // Class02 클래스 객체를 생성함.
var_dump($var_02 instanceof Class01);     // true
var_dump($var_02 instanceof Class02);     // true

 

/* 클래스의 인스턴스(instance)인지 아닌지를 확인할 때 */
$var_03 = new Class01; // Class01 클래스 객체를 생성함.
var_dump(!($var_03 instanceof Class02));  // true

/* 인터페이스(interface)로 구현한 클래스의 객체 인스턴스(object instance)인지 아닌지를 확인할 때 */
$var_04 = new Class02; // Class02 클래스 객체를 생성함.
var_dump($var_04 instanceof Class02);     // true
var_dump($var_04 instanceof Interface01); // true
```