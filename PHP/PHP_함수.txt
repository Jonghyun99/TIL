함수의 구조 생략 (자바스크립트와 같음)

### 함수의 호출

PHP의 함수와 클래스는 전역 범위(global scope)를 가진다.

따라서 같은 스크립트 내에서는 함수가 내부에서 정의되었더라도 외부에서 호출할 수 있다.

```php
$sum = sum(1, 2); // 함수 sum()을 호출하면서, 인수로 1과 2를 전달함.
                  // 함수의 호출이 끝난 뒤에는, 반환값을 변수 $sum에 대입함.
```

### 함수의 값 반환

```php
function sum($x, $y) // 함수의 이름은 sum()이며, 변수 x, y를 매개변수로 가지는 함수를 정의함.
{
    return $x + $y;  // 매개변수 x, y를 더한 값을 반환함.
}
echo sum(1, 2);      // sum() 함수에 숫자 1와 2을 인수로 전달하여 호출함.
```

PHP 7부터는 함수 반환값을 원하는 타입으로 반환받을 수 있도록 타입을 지정할 수 있다.

```php
function sum($x, $y) : float // 반환값의 타입을 float 타입으로 설정함.
{
    return $x + $y;
}
...
var_dump(sum(3 + 4)); // float
```

(약한 강도로 함수의 반환 타입을 설정하는 예시이다.)

```php
declare(strict_types = 1);   // strict 모드로 설정함.
 
function sum($x, $y) : float // 반환값의 타입을 float 타입으로 설정함.
{
    return $x + $y;
}
...

① var_dump(sum(3 + 4));   // 오류가 발생함.
② var_dump(sum(3 + 4.5)); // float
```

(강한 강도로 반환 타입을 설정하는 예제이다.)

script 모드는 느슨하게 처리되던 타입 검사를 엄격하게 수행하여 설정한 타입의 적절한 값이 나오지 않을 경우 오류를 발생시킨다.

## 매개변수와 인수

### 매개변수(parameter)와 인수(argument)

매개변수는 함수를 호출할 때 전달된 값을 내부에서 사용할 수 있게 해주는 변수

또한, 함수의 인수(argument)란 함수가 호출될 때 함수로 값을 전달해주는 변수를 가리킨다.

### 매개변수 전달 방식

1. 값 전달 방식
2. 참조 전달 방식

### 값 전달(passing by value)

기본적으로 함수의 인수는 값 전달 방식으로 매개변수로 전달된다.

인수를 함수에 전달하면, 새롭게 생성된 매개변수에 전달받은 값이 복사되어 저장된다.

이처럼 매개변수에 저장된 값은 전달받은 데이터의 복사본으로, 함수 안에서 변경되어도 함수 밖 원본 데이터에는 영향을 주지 않는다.

예제

```php
function increment($para)
{
    $para++; // $value의 값을 복사하여 increment() 함수에 인수로 전달함.
}
$value = 1;
increment($value);
```

위 예제에서 매개변수 $para는 함수 호출 시 생성되며, 전달받은 값인 1을 2로 증가시킨다.

하지만 함수 밖의 값인 value가 변하지는 않는다.

### 참조전달(passing by reference)

함수 내부에서 함수 밖 데이터를 조작하기 위해서 해당 변수를 전역 변수로 선언할 수 있다.

하지만 참조 전달(pass by reference)를 이용하면 더욱 유연한 코드를 작성할 수 있다.

참조 전달은 인수로 전달받은 값을 복사하는 것이 아닌, 전달받은 원본 데이터에 대한 참조를 매개변수에 전달한다. 따라서 함수 내부에 값을 변경하면, 함수 밖 데이터도 같이 바뀌게 된다.

참조전달을 사용하기 위해서는 매개변수 선언 시 앞에 & 기호를 붙여준다.

```php
function increment(&$para) // 인수로 전달되는 값의 원본을 참조함.
{
    $para++;
}
$value = 1;
increment($value);
```

위 예제에서는 value의 값이 증가한다.

### 디폴트 매개변수(default parameter)

디폴트 매개변수란 함수를 호출할 때 명시된 매개변수를 전달하지 않았을 경우 사용하게 될 기본 값이다. 함수 호출 시, 매개변수의 수를 맞춰주지 않으면 PHP 파서는 오류를 발생시키지만 디폴트 매개변수를 설정하면, 함수 호출 시 인자 수를 유연하게 할 수 있다.

= 대입 연산자를 이용하여 설정한다.

```php
function sum($value1, $value2 = 0, $value3 = 0)
```

위 예제에서 매개변수를 전달받지 못하면 설정된 기본 값인 0을 사용한다.

전달된 인수는 왼쪽부터 차례대로 대입되며 value3에 값을 전달하려면, 먼저 value1와 2에 값을 전달하여야 한다.

이 때문에 디폴트 매개변수 설정은 매개변수 리스트의 맨 오른쪽 끝 매개변수 부터 시작해야한다.

예제1

```php
function sum($value1, $value2 = 0, $value3 = 0)
{
    return $value1 + $value2 + $value3;
}

echo sum(1, 2, 3); // 6
echo sum(1, 2);    // 3
echo sum(1);       // 1

//echo sum();      // 오류가 발생함.
```

예제2

```php
function sum($value1 = 0, $value2, $value3 = 0)
{
    return $value1 + $value2 + $value3;
}

echo sum(1, 2, 3); // 6
echo sum(1, 2);    // 3
//echo sum(1);     // 오류가 발생함.
//echo sum();      // 오류가 발생함.
```

### 가변 길이 인수 목록(variable-length argument list)

가변 길이 인수 목록은 함수 선언 시 전달받을 인수 개수를 미리 정하지 않고, 호출할 때 유동적으로 인수를 넘기는 기능이다.

PHP 5.5 이하에서는 func_num_args(), func_get_arg(), func_get_args() 함수를 사용하여 설정할 수 있었지만 PHP 5.6 이상에서는 '...' 토큰을 사용하여 간편하게 설정할 수 있다.

```php
function sum(...$num) // PHP 5.6 이상

{
    $sum = 0;
    foreach($num as $n) {
        $sum += $n;
    }
    return $sum;
}
```

위 예시와 같이 ...토큰을사용하면 전달받은 인수를 배열 형태로 저장하여 배열 $num을 이용하여 접근할 수 있다.

## 함수의 활용

### 조건적인 함수(conditional function)

조건적인 함수는 특정 조건을 만족할 때만 선언하는 함수이다.

```php
$makefunc = true;
//func(); // 이 부분은 func() 함수가 선언되기 전이므로, 함수를 호출할 수 없습니다.

if($makefunc) {
    function func()
    {
        echo "이제 함수를 사용할 수 있습니다";
    }

    func(); // 이 부분은 func() 함수가 선언되었으므로, 함수를 호출할 수 있습니다.
}
```

설정된 조건을 만족하지 못했을 땐 선언 자체가 안되므로, 해당 함수를 호출할 수 없다.

### 함수안의 함수(function within function)

```php
function out()
{
    function in()
    {
        echo "이제 함수를 사용할 수 있습니다";
    }
}

//in(); // 이 부분은 in() 함수가 선언되기 전이므로, 함수를 호출할 수 없습니다.
out();
in();   // 이 부분은 in() 함수가 선언되었으므로, 함수를 호출할 수 있습니다.
```

out을 호출하여먄 in을 호출할 수 있다.

### 재귀 함수(recursive function)

재귀 함수는 함수가 자기 자신을 또 다시 호출하는 함수를 의미한다.

이러한 재귀함수는 자기가 자신을 계속해서 자신을 호출하므로, 끝없이 반복된다.

따라서 함수 내 중단 명령문이 포함되어야 한다.

```php
function factorial($num)
{
    if($num > 1)                           // 1이 될 때까지
        return $num * factorial($num - 1); // 1씩 감소시킨 값을 전달하여 자기 자신을 계속 호출함.
    else
        return 1;
}
echo factorial(4);
```

### 가변 함수(variable function)

함수를 변수에 담아 호출한다.

```php
function first()

{
    echo "first() 함수입니다.<br><br>";
}
function second($para)

{
    echo "second() 함수입니다.<br>";

    echo "함수 호출 시 전달받은 인수의 값은 {$para}입니다.";
}
$func = "first";
$func();    // first() 함수를 호출함.
$func = "second"
$func(20);  // second() 함수를 호출함.
```