## MySQL 연결

### MySQL extension

예전에는 PHP와 MySQL 연결을 위해 MySQL extension API를 사용했다.

이는 mysql_로 시작하는 함수를 사용하며 DB를 관리할 수 있었지만

5.5.0부터 deprecated가 되어 7.0에서 삭제되었다.

### MySQLi와 PDO

따라서 현재 PHP에서 MySQL에 연결하기 위해 사용하는 API는 아래와 같다.

1. MySQL improved extension(MySQLi extension)
2. PHP Data Object(PDO)

위 두 가지는 각 각 장단점이 있지만 성능은 비슷하여 원하는 걸 선택하여 사용하면 된다.

여기서는 PDO를 사용하여 알아보도록 한다.

(1번 방식은 MySQL만 사용할 수 있지만 2번은 MySQL외 다른 DB에서도 사용할 수 있다)

### 서버와의 연결

PDO로 서버와 연결하는 예제이다.

```php
<?php
    $servername = "localhost";
    $dbname = "testDB";
    $user = "choi";
    $password = "0219";
 
    try
    {
①      $connect = new PDO('mysql:host=$servername;dbname=$dbname', $user, $password);
②      $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        echo "서버와의 연결 성공!";
    }
③  catch(PDOException $ex)
    {
        echo "서버와의 연결 실패! : ".$ex->getMessage()."<br>";
    }
?>
```

1번에서는 서버 이름, DB이름, 사용자명, 비밀번호를 전달해 PDO객체를 생성한다.

2번에서는 생성된 PDO 객체에 에러모드를 설정하고 있다.

이렇게 에러모드를 설정하면 PDO생성자는 에러 발생 시 PDOException을 던진다.

### 서버 연결 종료

연결은 PHP 스크립트가 끝나면 같이 종료되지만 수동으로 종료하려면 PDO객체에 null을 대입하자.

```php
<?php
    $connect= null;
?>
```

## 데이터베이스 생성

MySQL의 CREATE DATABASE문은 데이터베이스를 생성할 때 사용한다.

Hotel이라는 데이터베이스를 생성하는 예제이다.

```php
<?php
    $servername = "localhost";
    $dbname = "testDB";
    $user = "choi";
    $password = "0219";

    try
    {
        $connect = new PDO('mysql:host=$servername;dbname=$dbname', $user, $password);
        $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
①      $sql = "CREATE DATABASE Hotel";
②      $connect->exec($sql);
        echo "데이터베이스 생성 성공!";
    }
    catch(PDOException $ex)
    {
        echo "데이터베이스 생성 실패! : ".$ex->getMessage()."<br>";
    }
    $connect = null;
?>
```

1번에는 SQL 구문(satement)을 작성하고 2번에는 exec() 메소드로 실행한다.

(exec는 외부프로그램을 실행시켜주는 함수이다.)

```php
①  $sql = "CREATE TABLE Reservation
    (
        ID INT PRIMARY KEY,
        Name VARCHAR(30) NOT NULL,
        ReservDate DATE NOT NULL,
        RoomNum INT
    )";
```

위와 같이 필드와 제약조건도 함께 명시할 수 있다.

## INSERT문

### INSERT

```php
①      $sql = "INSERT INTO Reservation(ID, Name, ReserveDate, RoomNum) VALUES(5, '이순신', '2016-02-16', 1108)";
②      $connect->exec($sql);
        echo "레코드 추가 성공!";
```

### 여러 레코드 추가

여러 레코드를 한번에 추가할 때는 beingTransaction() 메소드로 새로운 트랜잭션을 시작할 수 있다.

commit() 메소드로 해당 트랜잭션을 커밋할 수 있다.

```php
try
    {
        $connect = new PDO('mysql:host=$servername;dbname=$dbname', $user, $password);

        $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
①      $connect->beginTransaction(); // 새로운 트랜젝션을 시작함.
②      $connect->exec("INSERT INTO Reservation(ID, Name, ReserveDate, RoomNum) VALUES(1, '홍길동', '2016-01-05', 2014)");
③        $connect->exec("INSERT INTO Reservation(ID, Name, ReserveDate, RoomNum) VALUES(2, '임꺽정', '2016-02-12', 918)");
④        $connect->exec("INSERT INTO Reservation(ID, Name, ReserveDate, RoomNum) VALUES(3, '장길산', '2016-01-16', 1208)");
⑤      $connect->commit();           // 해당 트랜젝션을 커밋(commit)함.

        echo "레코드 추가 성공!";
    }
    catch(PDOException $ex)
    {
        echo "레코드 추가 실패! : ".$ex->getMessage()."<br>";
    }
```

위 예제 1번에서 beingTransaction() 메소드를 호출하여 자동 커밋 모드 사용을 중지하고, 새로운 트랜잭션을 시작한다. 

그러면 2,3,4번 라인에서 메소드를 호출해도 자동으로 커밋하지 않고 쌓이게 된다.

즉 5번 라인처럼 commit() 메소드를 호출하여야 해당 트랜잭션을 데이터베이스에 커밋하게 된다.

## UPDATE문

### 레코드 수정

```php
// SET 절을 통해 전달한 데이터로 Reservation 테이블의 레코드를 수정하는 SQL 구문
①      $sql = "UPDATE Reservation SET RoomNum = 2002 WHERE Name = '홍길동'";
②      $statement = $connect->prepare($sql);
③      $statement->execute();
④      echo $statement->rowCount()."개의 레코드 수정 성공!";
```

1번에서 SQL 구문을 작성한다.

2번에서 prepare() 메소드를 통해 준비상태로 만든다.

3번에서 이렇게 준비된 상태인 SQL 구문을 PDOStatement 클래스의 execute() 메소드를 사용해 실행한다.

*prepare() 메소드는 인수로 전달받은 SQL 구문을 준비된 상태로 설정하고, 이에 해당하는 PDO객체를 반환한다.

**execute() 메소드는 준비된 SQL 구문을 실행하고, 해당 구문의 영향을 받은 레코드 개수를 반환한다.

## DELTE문

### 레코드 삭제

```php
$connect = new PDO('mysql:host=$servername;dbname=$dbname', $user, $password);
        $connect->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
①      $sql = "DELETE FROM Reservation WHERE Name = '홍길동'";
②      $connect->exec($sql);
```

1번 라인에서 SQL 작성

2번 라인에서 실행한다.

## SELECT문

### 레코드 선택

```php
①      $sql = "SELECT Name, ReserveDate FROM Reservation";
②      foreach ($connect->query($sql) as $field) {
            echo $field['Name']."님의 예약일자 : ";
            echo $field['ReserveDate']."<br>";
        }
```

1번에 SQL작성

2번에 query메소드로 실행되며 반환 결과를 foreach를 통해 실행한다.

*query()메소드는 인수로 전달받은 SQL 구문을 실행하고, 그 결과 집합에 해당하는 PDOStatement 객체를 반환한다.

### 실행문의 차이점

각 SQL문을 실행할 때 exec(), execute(), prepare(), query() 등이 사용되었는데

보안 문제로 prepare(), execute()를 사용하는 것이 가장 권장된다고 한다.

이를 사용했을 때 데이터베이스 서버에 사용자 입력 값이 아닌 prepare객체를 전송하므로 더 보안에 유리하다고 한다.

(사용자가 쿼리에 직접 값을 입력할 수 있는 방식은 보안에 다소 위험하기 때문)

때문에 만약 데이터를 수정하지 않는 쿼리문이라면 exec()를 사용하는 것이 더 효율적일 것이다.

하지만 exec()는 반환값이 없으므로 반환값이 필요한 경우(SELECT문)의 경우 PDO클래스를 상속받은 query()메소드를 사용하면 될 것이다.

셋 다 각 쿼리문의 실행은 시킬 수 있다. 그러므로 용도에 맞게 사용하는 것이 좋을 듯 하다.