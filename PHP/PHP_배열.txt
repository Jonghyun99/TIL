## 배열의 기초

### 배열이란?

맵으로 이루어진 순서가 있는 집합, 맵은 한 쌍의 (key)와 값(value)로 이루어져 있다.

이때 배열을 구성하는 각각의 맵을 배열 요소(array element)라고 한다.

PHP 배열의 종류

1. 1차원 배열
2. 다차원 배열
3. 연관 배열

### 1차원 배열

1차원 배열은 가장 기본적인 배열로 다음과 같은 문법에 선언된다.

문법

```php
$배열이름 = array();
```

PHP에서는 array()라는 함수를 이용해 배열을 생성한다.

배열 이름은 배열을 선언한 후 접근하기 위해 사용한다.

### 배열의 참조

배열 요소에 접근하기 위해 인덱스(index)를 사용하며 숫자 0부터 시작한다.

[ ] 연산자를 사용한다.

문법

```php
$배열이름[인덱스]
```

인덱스 뿐만 아니라 문자열을 사용할 수 있다. (연관 배열)

### 배열 요소의 추가

예제

```php
$arr = array(); //배열 생성
$arr[0] = "apple"; //요소 추가
$arr[1] = "banana";
$arr[2] = "orange";
```

배열 생성과 요소 추가하는 예제이다.

문법

```php
$배열이름 = array(배열요소1, 배열요소2, ...);
```

또한 배열 생성과 동사에 요소 값을 가질 수 있다.

```php
$arr = array("apple", "banana", "orange");  // 배열 생성과 동시에 초기화
```

```php
$arr[] = "apple";  // 배열 인덱스를 생략하여, 순서대로 배열에 추가됨.
$arr[] = "banana";
$arr[] = "orange";
```

위와 같이 인덱스를 생략하면 0부터 시작하며 순서대로 저장된다.

### 배열의 홀(hole)

특정 인덱스에 요소 추가

```php
$arr = array();            // 배열의 생성

$arr[10] = "banana";       // 인덱스 10에만 배열 요소를 추가함.

var_dump($arr);
var_dump($arr[0]);         // NULL
var_dump(isset($arr[0]));  // false
var_dump(isset($arr[10])); // true
```

isset함수는 변수가 초기화 되어 있는지 확인해준다.

### 루프를 이용한 접근

```php
$arr = array("apple", "banana", "orange");
for($i = 0; $i < count($arr); $i++){
    echo $arr[$i]."<br>";
}
```

count 함수는 배열의 개수를 반환한다.

## 다차원 배열

### 다차원 배열(multidimensional array)

2차원 이상의 배열

### 2차원 배열

2차원 배열이란 배열 요소로 또 다른 1차원 배열을 사용하는 배열을 의미한다.

문법

```php
$배열이름 = array( array(), array(), ...);
```

2차원 배열은 1차원 배열과 같이 array() 함수를 사용해 선언한다.

1차원 배열과 다른 점은 array() 함수를 한 번 더 사용하여, 배열 요소에또 다른 1차원 배열을 생성한다는 점이다.

2차원 배열은 행과 열을 가진 행렬과 같은 모양으로 구성된다.

1차원 배열의 개수만큼 행의 수가 늘어나고, 열의 수는 1차원 배열의 요수 개수로 정해진다.

### 2차원 배열 요소 입력

2차원 배열도 접근하기 위해서는 인덱스를 사용하며 [ ] 연산자를 두 번 사용하면 된다.

```php
$arr = array( // 1차원 배열을 3개 갖는 2차원 배열 선언
    array(),
    array(),
    array()
);

$arr[0][0] = "apple"; // 배열 요소 입력
$arr[0][1] = "korea";
$arr[0][2] = 1000;

$arr[1][0] = "banana";
$arr[1][1] = "philippines";
$arr[1][2] = 2000;

$arr[2][0] = "orange";
$arr[2][1] = "us";
$arr[2][2] = 1500;

echo $arr[0][0].", ".$arr[0][1].", ".$arr[0][2]."<br>";
echo $arr[1][0].", ".$arr[1][1].", ".$arr[1][2]."<br>";
echo $arr[2][0].", ".$arr[2][1].", ".$arr[2][2]";
```

1차원 배열과 마찬가지로 2차원 배열을 생성하면서 동시에 배열 요소를 초기화할 수 있다.

```php
$arr = array( // 1차원 배열을 3개 갖는 2차원 배열 선언과 동시에 초기화
    array("apple", "korea", 1000),
    array("banana", "philippines", 2000),
    array("orange", "us", 1500)
);
```

### 루프를 이용한 2차원 배열 접근

2차원 배열도 1차원 배열과 마찬가지로 for문에 배열의 인덱스를 이용하여 접근할 수 있다.

for문을 2번 사용하여야함

```php
for($row = 0; $row < 3; $row++) {
    for($column = 0; $column < count($arr[$row]); $column++){
        echo $arr[$row][$column].", ";
    }
}
```

### 3차원 배열

```php
$배열이름 = array(
    array(
        array(),
        array(),
        ...
    ),
    array(
        array(),
        array(),
        ...
    ),
    ...
);
```

구조는 같다.

## 연관 배열

### 연관 배열(associative array)

PHP에서는 문자열도 배열의 인덱스로 사용할 수 있다.

연관 배열은 이 처럼 다양한 타입의 배열을 의미한다.

키값에 더 명확한 의미를 부여할 수 있다.

### 연관 배열의 참조

연관 배열의 각 요소를 참조하고 싶을 때는 배열 이름과 키(key)를 사용하시면 된다.

```php
$배열이름["키"] = 값;
```

예제

```php
$array = array();        // 배열 생성
$array["apple"] = 1000;  // 연관 배열 요소 추가
$array["banana"] = 2000; 
$array["orange"] = 1500;
```

연관배열 생성과 동시 초기화 예제

```php
$array = array("apple" => 1000, "banana" => 2000, "orange" => 1500);
echo $array["apple"].", ".$array["banana"].", ".$array["orange"];
```

### 연관 배열 접근

for문방식 생략

```php
$array = array("apple" => 1000, "banana" => 2000, "orange" => 1500);

while($element = each($array)) {
    echo $element['key']." ".$element['value']."<br>";
}
```

each()함수는 배열 커서가 현재 가리키고 있는 배열 요소를 반환하고, 다음 배열 요소를 가리키도록 한다.

(departed 방식)